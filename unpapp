#!/usr/bin/perl

use strict;
use warnings;
use File::Basename;
use File::Path qw(make_path);
use IO::Uncompress::AnyInflate qw(anyinflate $AnyInflateError);
use FindBin;
use lib "$FindBin::Bin";
use Win::Exe;

my $ifile = $ARGV[0] or die("Usage: unpapp <papp.exe>");
my $odir = "perl";
my $sdir = "special";

# Extract the BFS resource
my $exe = Win::Exe->new($ifile) or die("Can't load exe file");
my $bfs = $exe->FindResource('', 1) or die("Can't read BFS resource");

# Read the header
my ($magic, $version, $totalsize, $filecount, $unk3, $fileindexoffset, $unk5, $dirindexoffset, $dircount) = unpack('(a4LLLLSSLL)<', $bfs);
# Verify that this is in fact a BFS
$magic eq "\x{ff}BFS" or die("Invalid magic");
$version == 1 or die("Invalid version");
#printf("totalsize=%d filecount=%d unk3=%d fileindexoffset=%d unk5=%d dirindexoffset=%d dircount=%d\n", $totalsize, $filecount, $unk3, $fileindexoffset, $unk5, $dirindexoffset, $dircount);

my %files;
my $filenameoffset = $fileindexoffset;
for (my $fileno = 0; $fileno < $filecount; $fileno++) {
	# 16bit file name length
	my $namelen = unpack('S<', substr($bfs, $filenameoffset, 2));
	$filenameoffset += 2;
	# N characters file name
	my $filename = defuscate(substr($bfs, $filenameoffset, $namelen));
	$filenameoffset += $namelen;
	# Number of padding characters up to 4 byte alignment
	my $pad = 3 - (2 + $namelen + 3) % 4;
	$filenameoffset += $pad;
	# 32bit offset of data
	my $fileoffset = unpack('L<', substr($bfs, $filenameoffset, 4));
	$filenameoffset += 4;
	#printf("filename=%s pad=%d fileoffset=0x%08x offset=0x%08x\n", $filename, $pad, $fileoffset, $filenameoffset);
	$files{$filename} = { 'name' => $filename, 'offset' => $fileoffset };
}

# dirindex: 67dc..87db (8192 bytes)
# 4x 32bit header?
# dircount entries
# each 4x 32bit
# TODO

for my $filename (keys(%files)) {
	# file entry:
	my $file = $files{$filename};
	# 32bit compressed size
	# 32bit uncompressed size
	# 32bit type (02 = uncompressed?)
	my ($uncompsize, $compsize, $type) = unpack('(LLL)<', substr($bfs, $file->{offset}, 3 * 4));
	# compressed_size bytes data
	my $data = substr($bfs, $file->{offset} + 3 * 4, $compsize);
	#printf("filename=%s uncompsize=%d compsize=%d type=%d\n", $filename, $uncompsize, $compsize, $type);

	my $cleartext = undef;
	if ($type == 2) {
		# Deobfuscate
		$cleartext = defuscate($data);
	} elsif ($type == 3) {
		# Decompress and deobfuscate
		my $uncompressed = '';
		anyinflate(\$data => \$uncompressed);
		if ($uncompressed) {
			$cleartext = defuscate($uncompressed);
		} else {
			warn("Can't decompress data: $AnyInflateError");
		}
	} else {
		printf("Unsupported type %d for file %s\n", $type, $file->{name});
	}

	# Did we get any data?
	if (defined($cleartext)) {
		my $ofile;
		if ($file->{name} =~ /^[*<](.*)/) {
			# Special file handling
			printf("Special file: %s\n", $1);
			$ofile = sprintf("%s/%s", $sdir, $1);
		} else {
			$ofile = sprintf("%s/%s", $odir, $file->{name});
		}
		if (defined($ofile)) {
			# Create intermediate dirs if necessary
			my $dir = dirname($ofile);
			# Ignore errors, fail on open
			make_path($dir);
			# And write
			open(my $output, '>', $ofile);
			if ($output) {
				printf("Writing: %s\n", $ofile);
				print($output $cleartext);
			} else {
				warn("Can't open $ofile");
			}
		}
	}
}


sub defuscate {
	#my ($input) = @_;
	#my $output = '';
	#for my $char (split('', $input)) {
	#	push($output, chr(ord($char) ^ 0xaa));
	#}
	#return $output;
	#return join('', map({ chr(ord($_) ^ 0xaa) } split('', $_[0]));
	return $_[0] ^ chr(0xaa) x length($_[0]);
}
